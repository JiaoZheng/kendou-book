<style lang="less" src='@/assets/less/public.less'></style>
<style lang="less" src='@/assets/less/iconfont.less'></style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';

import { setStore } from 'wepy-redux';
import configStore from './store';

import { stringifyUrlParams } from '@/utils/format';
import { setStorageSync, getStorageSync } from '@/utils/storage';
import request from '@/utils/request';

const store = configStore();

setStore(store);

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index', // 个人中心
      'pages/detail', // 内容
    ],
    window: {
      backgroundTextStyle: 'dark',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black'
    }
  };

  globalData = {
    userInfo: null,
    loginQueue: []
  };
  /**
   * 获取当前页地址
   * @return {[type]} [description]
   */
  getCurrentPageUrl() {
    let pages = getCurrentPages();
    let url;

    if (pages.length) {
      let curPage = pages[pages.length - 1];

      url = `/${curPage.route}?${stringifyUrlParams(curPage.options)}`;
    }

    return url;
  }
  constructor() {
    super();
    this.use('promisify');
    this.use('requestfix');

    this.intercept('request', {
      config(params) {
        // console.log('request params:', params)
        return params;
      },
      success(res) {
        // console.log('request success app:, res=', res)

        // 接口返回20004意味着登录态失效，重新授权
        if (res.data.state && res.data.state.code === 20004) {
          setStorageSync('sid', 0, 1);
          let currentPageUrl = this.getCurrentPageUrl();

          if (currentPageUrl) {
            wepy.redirectTo({
              url: currentPageUrl
            });
          }
        } else if (res.data.state && res.data.state.code !== 0) {
          wx.showToast({
            title: res.data.state.msg,
            icon: 'none',
            duration: 2000
          });
          return {};
        } else {
          if (res.data && res.data.success) {
            return res.data
          }
          return res;
        }
      },
      fail(e) {
        console.log('request error', e);
        return e;
      }
    });
  }

  onLaunch() {}

  /**
   * 清空消费队列
   * @param {String} state 登录状态，成功:resolve，失败: reject
   */
  clearLoginQueue(state) {
    console.log('....clearLoginQueue:', state);
    if (state === 'resolve') {
      let len = this.globalData.loginQueue.length;
      if (len) {
        this.globalData.loginQueue[len - 1].resolve();
      }
    } else {
      this.globalData.loginQueue.forEach(item => item.reject());
    }
    this.globalData.loginQueue = [];
  }

  login() {
    return new Promise((resolve, reject) => {
      this.globalData.loginQueue.push({
        resolve,
        reject
      });
      if (this.globalData.loginQueue.length > 1) {
        return;
      }
      console.log('getStorageSync(sid)::', getStorageSync('sid'));
      // 检查登录session是否过期
      if (!getStorageSync('sid')) {
        this._doLogin();
      } else {
        // 登录session未过期
        wepy
          .checkSession()
          .then(() => {
            // 重新获取一下用户信息
            this.getUserInfo();
            this.clearLoginQueue('resolve');
          })
          .catch(err => {
            this._doLogin();
          });
      }
    });
  }

  async _doLogin() {
    wepy.showLoading({
      title: '加载中'
    });

    try {
      let loginRes = await wepy.login();
      if (loginRes.code) {
        let userInfoRes;

        try {
          // 获取用户信息
          userInfoRes = await wepy.getUserInfo();
        } catch (e) {
          if (e.errMsg.indexOf('unauthorized') > -1) {
            this.clearLoginQueue('reject');

            let currentPageUrl = this.getCurrentPageUrl();
            wepy.redirectTo({
              url: `/pages/login?page=${encodeURIComponent(currentPageUrl)}`
            });
            return;
          }

          let scope = await wepy.getSetting();

          // 判断用户信息权限
          if (!scope.authSetting['scope.userInfo']) {
            scope = await wepy.openSetting({
              scope: 'scope.userInfo'
            });

            if (!scope.authSetting['scope.userInfo']) {
              wepy.showToast({
                title: '登录授权失败，登录需允许获取用户信息！',
                icon: 'none'
              });

              throw Error('获取用户信息失败: 无获取用户信息权限！');
            }

            userInfoRes = await wepy.getUserInfo();
          } else {
            throw Error('获取用户信息失败. Error: ', e);
          }
        }

        const { rawData, signature, iv, encryptedData } = userInfoRes;

        this.globalData.userInfo = userInfoRes.userInfo;

        // 登录授权
        let apiRes = await request({
          url: '/weapp-user/user/weappAuth',
          data: {
            code: loginRes.code,
            rawData,
            signature,
            iv,
            encryptedData
          }
        });

        // 保存sid, session状态保持
        if (apiRes && apiRes.state && apiRes.state.code === 0) {
          const { sid, expires, campId } = apiRes.data;
          // console.log('apiRes:', apiRes);

          if (sid && expires) {
            this.saveLoginSessionId(sid, expires);

            this.clearLoginQueue('resolve');
          } else {
            throw Error(`授权登录失败！sid=${sid} expires=${expires}`);
          }
        } else if (apiRes.state) {
          throw Error('调用授权登录接口失败！ msg:' + apiRes.state.msg);
        }

        wepy.hideLoading();
      } else {
        throw Error('调用wx.login获取code失败！' + loginRes.errMsg);
      }
    } catch (err) {
      console.error('授权失败:', err);
      wepy.hideLoading();
      setTimeout(() => {
        this.clearLoginQueue('reject');
      }, 500);
    }
  }

  /**
   * 本地存储sid，保持session状态（过期时间和服务端同步，2天）
   * @param  {[type]} sid     [description]
   * @param  {[type]} expires [description]
   * @return {[type]}         [description]
   */
  saveLoginSessionId(sid, expires) {
    setStorageSync('sid', sid, expires);
  }

  getUserInfo(cb) {
    if (this.globalData.userInfo) {
      return this.globalData.userInfo;
    }

    wepy.getUserInfo().then(res => {
      this.globalData.userInfo = res.userInfo;
      cb && cb(res.userInfo);
    });
  }
}
</script>
